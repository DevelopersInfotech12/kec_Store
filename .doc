export function asyncHandler(handler) {
  return async (req, res) => {
    try {
      return await handler(req, res);
    } catch (error) {
      const errorResponse = errorHandler(error);
      return Response.json(errorResponse, { status: errorResponse.statusCode });
    }
  };
}
```

## API Routes

### src/app/api/products/route.js
```javascript
import { NextResponse } from 'next/server';
import ProductController from '@/controllers/ProductController';
import { errorHandler } from '@/middleware/errorHandler';

export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    const category = searchParams.get('category');
    const search = searchParams.get('search');

    if (id) {
      const result = await ProductController.getProductById(id);
      return NextResponse.json(result);
    }

    const filters = {};
    if (category) filters.category = category;
    if (search) filters.search = search;

    const result = await ProductController.getAllProducts(filters);
    return NextResponse.json(result);
  } catch (error) {
    const errorResponse = errorHandler(error);
    return NextResponse.json(errorResponse, { status: errorResponse.statusCode });
  }
}

export async function POST(request) {
  try {
    const body = await request.json();
    const result = await ProductController.createProduct(body);
    return NextResponse.json(result, { status: 201 });
  } catch (error) {
    const errorResponse = errorHandler(error);
    return NextResponse.json(errorResponse, { status: errorResponse.statusCode });
  }
}

export async function PUT(request) {
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');
    const body = await request.json();

    if (!id) {
      return NextResponse.json(
        { success: false, error: 'Product ID required' },
        { status: 400 }
      );
    }

    const result = await ProductController.updateProduct(id, body);
    return NextResponse.json(result);
  } catch (error) {
    const errorResponse = errorHandler(error);
    return NextResponse.json(errorResponse, { status: errorResponse.statusCode });
  }
}

export async function DELETE(request) {
  try {
    const { searchParams } = new URL(request.url);
    const id = searchParams.get('id');

    if (!id) {
      return NextResponse.json(
        { success: false, error: 'Product ID required' },
        { status: 400 }
      );
    }

    const result = await ProductController.deleteProduct(id);
    return NextResponse.json(result);
  } catch (error) {
    const errorResponse = errorHandler(error);
    return NextResponse.json(errorResponse, { status: errorResponse.statusCode });
  }
}
```

### src/app/api/orders/route.js
```javascript
import { NextResponse } from 'next/server';
import OrderController from '@/controllers/OrderController';
import { errorHandler } from '@/middleware/errorHandler';

export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const orderId = searchParams.get('orderId');
    const status = searchParams.get('status');
    const email = searchParams.get('email');

    if (orderId) {
      const result = await OrderController.getOrderById(orderId);
      return NextResponse.json(result);
    }

    const filters = {};
    if (status) filters.status = status;
    if (email) filters.email = email;

    const result = await OrderController.getAllOrders(filters);
    return NextResponse.json(result);
  } catch (error) {
    const errorResponse = errorHandler(error);
    return NextResponse.json(errorResponse, { status: errorResponse.statusCode });
  }
}

export async function POST(request) {
  try {
    const body = await request.json();
    const result = await OrderController.createOrder(body);
    return NextResponse.json(result, { status: 201 });
  } catch (error) {
    const errorResponse = errorHandler(error);
    return NextResponse.json(errorResponse, { status: errorResponse.statusCode });
  }
}

export async function PUT(request) {
  try {
    const { searchParams } = new URL(request.url);
    const orderId = searchParams.get('orderId');
    const action = searchParams.get('action');
    const body = await request.json();

    if (!orderId) {
      return NextResponse.json(
        { success: false, error: 'Order ID required' },
        { status: 400 }
      );
    }

    let result;
    if (action === 'cancel') {
      result = await OrderController.cancelOrder(orderId);
    } else {
      result = await OrderController.updateOrderStatus(
        orderId,
        body.status,
        body.paymentId
      );
    }

    return NextResponse.json(result);
  } catch (error) {
    const errorResponse = errorHandler(error);
    return NextResponse.json(errorResponse, { status: errorResponse.statusCode });
  }
}
```

### src/app/api/payment/create/route.js
```javascript
import { NextResponse } from 'next/server';
import PaymentController from '@/controllers/PaymentController';
import OrderController from '@/controllers/OrderController';
import { errorHandler } from '@/middleware/errorHandler';

export async function POST(request) {
  try {
    const body = await request.json();
    const { items, customer } = body;

    // Validate request
    if (!items || !items.length) {
      return NextResponse.json(
        { success: false, error: 'Items are required' },
        { status: 400 }
      );
    }

    if (!customer || !customer.name || !customer.email || !customer.phone) {
      return NextResponse.json(
        { success: false, error: 'Customer information is incomplete' },
        { status: 400 }
      );
    }

    // Calculate total amount
    const totalAmount = items.reduce(
      (sum, item) => sum + item.price * item.quantity,
      0
    );

    // Create order
    const orderResult = await OrderController.createOrder({
      items,
      customer,
      totalAmount,
      status: 'pending',
    });

    if (!orderResult.success) {
      return NextResponse.json(orderResult, { status: 400 });
    }

    // Initiate payment
    const paymentResult = await PaymentController.initiatePayment({
      orderId: orderResult.orderId,
      amount: totalAmount,
      customer,
      metadata: {
        items: items.map(i => ({ id: i.id, name: i.name, quantity: i.quantity })),
      },
    });

    return NextResponse.json({
      success: true,
      orderId: orderResult.orderId,
      paymentId: paymentResult.paymentId,
      paymentUrl: paymentResult.paymentUrl,
    });
  } catch (error) {
    const errorResponse = errorHandler(error);
    return NextResponse.json(errorResponse, { status: errorResponse.statusCode });
  }
}
```

### src/app/api/payment/verify/route.js
```javascript
import { NextResponse } from 'next/server';
import PaymentController from '@/controllers/PaymentController';
import { errorHandler } from '@/middleware/errorHandler';

export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const paymentId = searchParams.get('payment_id');

    if (!paymentId) {
      return NextResponse.json(
        { success: false, error: 'Payment ID required' },
        { status: 400 }
      );
    }

    const result = await PaymentController.verifyPayment(paymentId);
    return NextResponse.json(result);
  } catch (error) {
    const errorResponse = errorHandler(error);
    return NextResponse.json(errorResponse, { status: errorResponse.statusCode });
  }
}
```

## Context

### src/context/CartContext.js
```javascript
'use client';

import { createContext, useContext, useState, useEffect } from 'react';

const CartContext = createContext();

export function CartProvider({ children }) {
  const [cart, setCart] = useState([]);
  const [isOpen, setIsOpen] = useState(false);

  useEffect(() => {
    const savedCart = localStorage.getItem('cart');
    if (savedCart) {
      setCart(JSON.parse(savedCart));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('cart', JSON.stringify(cart));
  }, [cart]);

  const addToCart = (product) => {
    setCart(prev => {
      const existing = prev.find(item => item.id === product.id || item._id === product._id);
      if (existing) {
        return prev.map(item =>
          (item.id === product.id || item._id === product._id)
            ? { ...item, quantity: item.quantity + 1 }
            : item
        );
      }
      return [...prev, { ...product, quantity: 1 }];
    });
    setIsOpen(true);
  };

  const removeFromCart = (productId) => {
    setCart(prev => prev.filter(item => item.id !== productId && item._id !== productId));
  };

  const updateQuantity = (productId, quantity) => {
    if (quantity <= 0) {
      removeFromCart(productId);
      return;
    }
    setCart(prev =>
      prev.map(item =>
        (item.id === productId || item._id === productId) ? { ...item, quantity } : item
      )
    );
  };

  const clearCart = () => {
    setCart([]);
    localStorage.removeItem('cart');
  };

  const getTotal = () => {
    return cart.reduce((sum, item) => sum + item.price * item.quantity, 0);
  };

  const getItemCount = () => {
    return cart.reduce((sum, item) => sum + item.quantity, 0);
  };

  return (
    <CartContext.Provider
      value={{
        cart,
        addToCart,
        removeFromCart,
        updateQuantity,
        clearCart,
        getTotal,
        getItemCount,
        isOpen,
        setIsOpen,
      }}
    >
      {children}
    </CartContext.Provider>
  );
}

export function useCart() {
  const context = useContext(CartContext);
  if (!context) {
    throw new Error('useCart must be used within CartProvider');
  }
  return context;
}
```

## Components

### src/components/ProductCard.js
```javascript
'use client';

import Link from 'next/link';
import { useCart } from '@/context/CartContext';

export default function ProductCard({ product }) {
  const { addToCart } = useCart();

  const productId = product._id || product.id;

  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-xl transition">
      <div className="h-64 bg-gray-200 flex items-center justify-center">
        {product.image ? (
          <img src={product.image} alt={product.name} className="w-full h-full object-cover" />
        ) : (
          <span className="text-gray-400 text-4xl">📦</span>
        )}
      </div>
      <div className="p-6">
        <h3 className="text-xl font-semibold text-gray-900 mb-2">
          {product.name}
        </h3>
        <p className="text-gray-600 mb-4 line-clamp-2">
          {product.description}
        </p>
        <div className="flex items-center justify-between mb-4">
          <span className="text-sm text-gray-500">Stock: {product.stock}</span>
          <span className="text-sm font-semibold text-primary">{product.category}</span>
        </div>
        <div className="flex items-center justify-between">
          <span className="text-2xl font-bold text-primary">
            ${product.price.toFixed(2)}
          </span>
          <div className="flex space-x-2">
            <Link
              href={`/products/${productId}`}
              className="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition"
            >
              View
            </Link>
            <button
              onClick={() => addToCart(product)}
              disabled={product.stock === 0}
              className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-blue-600 transition disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {product.stock === 0 ? 'Out of Stock' : 'Add to Cart'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
```

### src/components/CartSidebar.js
```javascript
'use client';

import { useCart } from '@/context/CartContext';
import { useRouter } from 'next/navigation';

export default function CartSidebar() {
  const { cart, removeFromCart, updateQuantity, getTotal, isOpen, setIsOpen, getItemCount } = useCart();
  const router = useRouter();

  if (!isOpen) return null;

  return (
    <>
      <div
        className="fixed inset-0 bg-black bg-opacity-50 z-40"
        onClick={() => setIsOpen(false)}
      />
      <div className="fixed right-0 top-0 h-full w-96 bg-white shadow-xl z-50 flex flex-col">
        <div className="p-6 border-b flex justify-between items-center">
          <div>
            <h2 className="text-2xl font-bold">Cart</h2>
            <p className="text-sm text-gray-600">{getItemCount()} items</p>
          </div>
          <button
            onClick={() => setIsOpen(false)}
            className="text-gray-500 hover:text-gray-700 text-2xl"
          >
            ✕
          </button>
        </div>

        <div className="flex-1 overflow-y-auto p-6">
          {cart.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500 mb-4">Your cart is empty</p>
              <button
                onClick={() => {
                  setIsOpen(false);
                  router.push('/products');
                }}
                className="text-primary hover:underline"
              >
                Continue Shopping
              </button>
            </div>
          ) : (
            <div className="space-y-4">
              {cart.map(item => {
                const itemId = item._id || item.id;
                return (
                  <div key={itemId} className="flex items-center space-x-4 border-b pb-4">
                    <div className="w-20 h-20 bg-gray-200 rounded flex items-center justify-center flex-shrink-0">
                      {item.image ? (
                        <img src={item.image} alt={item.name} className="w-full h-full object-cover rounded" />
                      ) : (
                        <span className="text-2xl">📦</span>
                      )}
                    </div>
                    <div className="flex-1 min-w-0">
                      <h3 className="font-semibold truncate">{item.name}</h3>
                      <p className="text-sm text-gray-600">${item.price.toFixed(2)}</p>
                      <div className="flex items-center space-x-2 mt-2">
                        <button
                          onClick={() => updateQuantity(itemId, item.quantity - 1)}
                          className="w-8 h-8 bg-gray-200 rounded hover:bg-gray-300 flex items-center justify-center"
                        >
                          -
                        </button>
                        <span className="w-8 text-center font-semibold">{item.quantity}</span>
                        <button
                          onClick={() => updateQuantity(itemId, item.quantity + 1)}
                          className="w-8 h-8 bg-gray-200 rounded hover:bg-gray-300 flex items-center justify-center"
                        >
                          +
                        </button>
                      </div>
                    </div>
                    <button
                      onClick={() => removeFromCart(itemId)}
                      className="text-red-500 hover:text-red-700 text-sm"
                    >
                      Remove
                    </button>
                  </div>
                );
              })}
            </div>
          )}
        </div>

        {cart.length > 0 && (
          <div className="border-t p-6">
            <div className="flex justify-between items-center mb-4">
              <span className="text-lg font-semibold">Total:</span>
              <span className="text-2xl font-bold text-primary">
                ${getTotal().toFixed(2)}
              </span>
            </div>
            <button
              onClick={() => {
                setIsOpen(false);
                router.push('/checkout');
              }}
              className="w-full bg-primary text-white py-3 rounded-lg hover:bg-blue-600 transition font-semibold"
            >
              Proceed to Checkout
            </button>
          </div>
        )}
      </div>
    </>
  );
}
```

### src/components/Header.js
```javascript
'use client';

import Link from 'next/link';
import { useCart } from '@/context/CartContext';

export default function Header() {
  const { getItemCount, setIsOpen } = useCart();

  return (
    <nav className="bg-white shadow-md sticky top-0 z-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center h-16">
          <Link href="/" className="text-2xl font-bold text-primary">
            Store
          </Link>
          <div className="flex items-center space-x-6">
            <Link
              href="/products"
              className="text-gray-700 hover:text-primary transition"
            >
              Products
            </Link>
            <button
              onClick={() => setIsOpen(true)}
              className="relative text-gray-700 hover:text-primary transition"
            >
              <span className="text-2xl">🛒</span>
              {getItemCount() > 0 && (
                <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                  {getItemCount()}
                </span>
              )}
            </button>
          </div>
        </div>
      </div>
    </nav>
  );
}
```

## App Pages

### src/app/layout.js
```javascript
import { Inter } from 'next/font/google';
import './globals.css';
import { CartProvider } from '@/context/CartContext';
import CartSidebar from '@/components/CartSidebar';
import Header from '@/components/Header';

const inter = Inter({ subsets: ['latin'] });

export const metadata = {
  title: 'Store - Buy Premium Products',
  description: 'Shop our premium products with secure payment',
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <CartProvider>
          <Header />
          {children}
          <CartSidebar />
        </CartProvider>
      </body>
    </html>
  );
}
```

### src/app/page.js
```javascript
import Link from 'next/link';

export default function Home() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
        <div className="text-center">
          <h1 className="text-5xl font-bold text-gray-900 mb-6">
            Welcome to Our Store
          </h1>
          <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
            Discover premium products with secure payment processing through Zoho
          </p>
          <div className="flex justify-center space-x-4">
            <Link
              href="/products"
              className="inline-block bg-primary text-white px-8 py-4 rounded-lg text-lg font-semibold hover:bg-blue-600 transition shadow-lg"
            >
              Browse Products
            </Link>
            <Link
              href="/products"
              className="inline-block bg-white text-primary border-2 border-primary px-8 py-4 rounded-lg text-lg font-semibold hover:bg-gray-50 transition shadow-lg"
            >
              Shop Now
            </Link>
          </div>
        </div>

        <div className="mt-20 grid grid-cols-1 md:grid-cols-3 gap-8">
          <div className="bg-white p-8 rounded-lg shadow-md text-center">
            <div className="text-4xl mb-4">🚚</div>
            <h3 className="text-xl font-bold mb-2">Fast Shipping</h3>
            <p className="text-gray-600">Quick delivery to your doorstep</p>
          </div>
          <div className="bg-white p-8 rounded-lg shadow-md text-center">
            <div className="text-4xl mb-4">🔒</div>
            <h3 className="text-xl font-bold mb-2">Secure Payment</h3>
            <p className="text-gray-600">Powered by Zoho payments</p>
          </div>
          <div className="bg-white p-8 rounded-lg shadow-md text-center">
            <div className="text-4xl mb-4">💯</div>
            <h3 className="text-xl font-bold mb-2">Quality Products</h3>
            <p className="text-gray-600">Premium quality guaranteed</p>
          </div>
        </div>
      </div>
    </div>
  );
}
```

### src/app/products/page.js
```javascript
'use client';

import { useState, useEffect } from 'react';
import ProductCard from '@/components/ProductCard';

export default function ProductsPage() {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/products');
      const data = await response.json();
      
      if (data.success) {
        setProducts(data.data);
      } else {
        setError(data.error || 'Failed to load products');
      }
    } catch (err) {
      setError('Failed to load products');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-gray-600">Loading products...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <p className="text-red-500 mb-4">{error}</p>
          <button
            onClick={fetchProducts}
            className="bg-primary text-white px-6 py-2 rounded-lg hover:bg-blue-600"
          >
            Try Again
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h1 className="text-4xl font-bold text-gray-900 mb-8">Our Products</h1>
        {products.length === 0 ? (
          <div className="text-center py-12">
            <p className="text-gray-600 mb-4">No products available</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {products.map(product => (
              <ProductCard key={product._id || product.id} product={product} />
            ))}
          </div>
        )}
      </div>
    </div>
  );
}
```

### src/app/products/[id]/page.js
```javascript
'use client';

import { useState, useEffect } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useCart } from '@/context/CartContext';

export default function ProductDetailPage() {
  const params = useParams();
  const router = useRouter();
  const { addToCart } = useCart();
  const [product, setProduct] = useState(null);
  const [quantity, setQuantity] = useState(1);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchProduct();
  }, [params.id]);

  const fetchProduct = async () => {
    try {
      const response = await fetch(`/api/products?id=${params.id}`);
      const data = await response.json();
      
      if (data.success) {
        setProduct(data.data);
      }
    } catch (error) {
      console.error('Error fetching product:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleAddToCart = () => {
    for (let i = 0; i < quantity; i++) {
      addToCart(product);
    }
    setQuantity(1);
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!product) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold mb-4">Product not found</h2>
          <button
            onClick={() => router.push('/products')}
            className="bg-primary text-white px-6 py-3 rounded-lg hover:bg-blue-600"
          >
            Back to Products
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <button
          onClick={() => router.back()}
          className="mb-6 text-gray-600 hover:text-gray-900 flex items-center"
        >
          ← Back
        </button>
        
        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 p-8">
            <div className="h-96 bg-gray-200 rounded-lg flex items-center justify-center">
              {product.image ? (
                <img src={product.image} alt={product.name} className="w-full h-full object-cover rounded-lg" />
              ) : (
                <span className="text-gray-400 text-6xl">📦</span>
              )}
            </div>
            <div>
              <h1 className="text-4xl font-bold text-gray-900 mb-4">{product.name}</h1>
              <p className="text-3xl font-bold text-primary mb-6">
                ${product.price.toFixed(2)}
              </p>
              <p className="text-gray-600 mb-6 leading-relaxed">{product.description}</p>
              <div className="mb-4">
                <span className="inline-block bg-blue-100 text-primary px-4 py-1 rounded-full text-sm font-semibold">
                  {product.category}
                </span>
              </div>
              <div className="mb-6">
                <span className="text-sm text-gray-500">Stock: </span>
                <span className="text-sm font-semibold">{product.stock} available</span>
              </div>
              <div className="mb-6">
                <span className="text-sm text-gray-500">SKU: </span>
                <span className="text-sm font-mono">{product.sku}</span>
              </div>
              <div className="flex items-center space-x-4 mb-6">
                <label className="text-gray-700 font-semibold">Quantity:</label>
                <div className="flex items-center space-x-2">
                  <button
                    onClick={() => setQuantity(Math.max(1, quantity - 1))}
                    className="w-10 h-10 bg-gray-200 rounded hover:bg-gray-300 font-bold"
                  >
                    -
                  </button>
                  <span className="w-12 text-center font-semibold text-lg">{quantity}</span>
                  <button
                    onClick={() => setQuantity(Math.min(product.stock, quantity + 1))}
                    className="w-10 h-10 bg-gray-200 rounded hover:bg-gray-300 font-bold"
                  >
                    +
                  </button>
                </div>
              </div>
              <button
                onClick={handleAddToCart}
                disabled={product.stock === 0}
                className="w-full bg-primary text-white py-4 rounded-lg hover:bg-blue-600 transition font-semibold text-lg disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {product.stock === 0 ? 'Out of Stock' : 'Add to Cart'}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
```

### src/app/checkout/page.js
```javascript
'use client';

import { useState } from 'react';
import { useCart } from '@/context/CartContext';
import { useRouter } from 'next/navigation';

export default function CheckoutPage() {
  const { cart, getTotal, clearCart } = useCart();
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    address: '',
  });
  const [errors, setErrors] = useState({});

  const validateForm = () => {
    const newErrors = {};
    
    if (!formData.name.trim()) newErrors.name = 'Name is required';
    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email is invalid';
    }
    if (!formData.phone.trim()) newErrors.phone = 'Phone is required';
    if (!formData.address.trim()) newErrors.address = 'Address is required';
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;
    
    setLoading(true);

    try {
      const items = cart.map(item => ({
        productId: item._id || item.id,
        name: item.name,
        price: item.price,
        quantity: item.quantity,
      }));

      const response = await fetch('/api/payment/create', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          items,
          customer: formData,
        }),
      });

      const data = await response.json();

      if (data.success) {
        clearCart();
        window.location.href = data.paymentUrl;
      } else {
        alert(data.error || 'Payment initiation failed. Please try again.');
      }
    } catch (error) {
      console.error('Checkout error:', error);
      alert('An error occurred. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  if (cart.length === 0) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="text-6xl mb-4">🛒</div>
          <h2 className="text-2xl font-bold text-gray-900 mb-4">Your cart is empty</h2>
          <button
            onClick={() => router.push('/products')}
            className="bg-primary text-white px-6 py-3 rounded-lg hover:bg-blue-600"
          >
            Continue Shopping
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <h1 className="text-4xl font-bold text-gray-900 mb-8">Checkout</h1>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Customer Information Form */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-2xl font-bold mb-6">Customer Information</h2>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label className="block text-gray-700 font-semibold mb-2">
                  Full Name *
                </label>
                <input
                  type="text"
                  required
                  value={formData.name}
                  onChange={e => setFormData({ ...formData, name: e.target.value })}
                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary focus:outline-none ${
                    errors.name ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="John Doe"
                />
                {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
              </div>
              
              <div>
                <label className="block text-gray-700 font-semibold mb-2">
                  Email Address *
                </label>
                <input
                  type="email"
                  required
                  value={formData.email}
                  onChange={e => setFormData({ ...formData, email: e.target.value })}
                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary focus:outline-none ${
                    errors.email ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="john@example.com"
                />
                {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}
              </div>
              
              <div>
                <label className="block text-gray-700 font-semibold mb-2">
                  Phone Number *
                </label>
                <input
                  type="tel"
                  required
                  value={formData.phone}
                  onChange={e => setFormData({ ...formData, phone: e.target.value })}
                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary focus:outline-none ${
                    errors.phone ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="+1 234 567 8900"
                />
                {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
              </div>
              
              <div>
                <label className="block text-gray-700 font-semibold mb-2">
                  Shipping Address *
                </label>
                <textarea
                  required
                  value={formData.address}
                  onChange={e => setFormData({ ...formData, address: e.target.value })}
                  rows="4"
                  className={`w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary focus:outline-none ${
                    errors.address ? 'border-red-500' : 'border-gray-300'
                  }`}
                  placeholder="123 Main St, City, State, ZIP"
                />
                {errors.address && <p className="text-red-500 text-sm mt-1">{errors.address}</p>}
              </div>
              
              <button
                type="submit"
                disabled={loading}
                className="w-full bg-primary text-white py-3 rounded-lg hover:bg-blue-600 transition font-semibold disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {loading ? (
                  <span className="flex items-center justify-center">
                    <svg className="animate-spin h-5 w-5 mr-3" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                    </svg>
                    Processing...
                  </span>
                ) : (
                  'Proceed to Payment'
                )}
              </button>
            </form>
          </div>

          {/* Order Summary */}
          <div className="bg-white rounded-lg shadow-md p-6 h-fit">
            <h2 className="text-2xl font-bold mb-6">Order Summary</h2>
            <div className="space-y-4 mb-6">
              {cart.map(item => {
                const itemId = item._id || item.id;
                return (
                  <div key={itemId} className="flex items-start space-x-4 pb-4 border-b">
                    <div className="w-16 h-16 bg-gray-200 rounded flex items-center justify-center flex-shrink-0">
                      {item.image ? (
                        <img src={item.image} alt={item.name} className="w-full h-full object-cover rounded" />
                      ) : (
                        <span className="text-xl">📦</span>
                      )}
                    </div>
                    <div className="flex-1">
                      <h3 className="font-semibold text-gray-900">{item.name}</h3>
                      <p className="text-sm text-gray-600">
                        Qty: {item.quantity} × ${item.price.toFixed(2)}
                      </p>
                    </div>
                    <p className="font-bold text-gray-900">
                      ${(item.price * item.quantity).toFixed(2)}
                    </p>
                  </div>
                );
              })}
            </div>
            
            <div className="space-y-2 mb-6 pb-6 border-b">
              <div className="flex justify-between text-gray-600">
                <span>Subtotal:</span>
                <span>${getTotal().toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-gray-600">
                <span>Shipping:</span>
                <span>Free</span>
              </div>
              <div className="flex justify-between text-gray-600">
                <span>Tax:</span>
                <span>Calculated at payment</span>
              </div>
            </div>
            
            <div className="flex justify-between items-center text-xl font-bold">
              <span>Total:</span>
              <span className="text-primary text-2xl">${getTotal().toFixed(2)}</span>
            </div>
            
            <div className="mt-6 p-4 bg-blue-50 rounded-lg">
              <p className="text-sm text-gray-700">
                <span className="font-semibold">🔒 Secure Checkout</span>
                <br />
                Your payment information is encrypted and secure.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
```

### src/app/success/page.js
```javascript
'use client';

import { useEffect, useState } from 'react';
import { useSearchParams, useRouter } from 'next/navigation';

export default function SuccessPage() {
  const searchParams = useSearchParams();
  const router = useRouter();
  const [paymentStatus, setPaymentStatus] = useState(null);
  const [loading, setLoading] = useState(true);
  const [orderDetails, setOrderDetails] = useState(null);

  useEffect(() => {
    const paymentId = searchParams.get('payment_id');
    
    if (paymentId) {
      verifyPayment(paymentId);
    } else {
      setLoading(false);
    }
  }, [searchParams]);

  const verifyPayment = async (paymentId) => {
    try {
      const response = await fetch(`/api/payment/verify?payment_id=${paymentId}`);
      const data = await response.json();
      
      setPaymentStatus(data);
      
      if (data.success && data.data) {
        setOrderDetails(data.data);
      }
    } catch (error) {
      console.error('Error verifying payment:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-gray-600 text-lg">Verifying your payment...</p>
        </div>
      </div>
    );
  }

  const isSuccess = paymentStatus?.success && paymentStatus?.status === 'success';

  return (
    <div className="min-h-screen bg-gray-50 flex items-center justify-center py-12 px-4">
      <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8">
        {isSuccess ? (
          <div className="text-center">
            <div className="w-20 h-20 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg className="w-12 h-12 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
              </svg>
            </div>
            
            <h1 className="text-3xl font-bold text-gray-900 mb-4">
              Payment Successful!
            </h1>
            
            <p className="text-gray-600 mb-8">
              Thank you for your purchase. Your order has been confirmed and will be processed shortly.
            </p>
            
            {orderDetails && (
              <div className="bg-gray-50 rounded-lg p-6 mb-8 text-left">
                <h3 className="font-semibold text-gray-900 mb-4">Order Details</h3>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-600">Order ID:</span>
                    <span className="font-mono font-semibold">{orderDetails.orderId}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Payment ID:</span>
                    <span className="font-mono font-semibold">{orderDetails.paymentId}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-600">Amount:</span>
                    <span className="font-semibold">${orderDetails.amount?.toFixed(2)}</span>
                  </div>
                </div>
              </div>
            )}
            
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
              <p className="text-sm text-blue-800">
                📧 A confirmation email has been sent to your email address with order details.
              </p>
            </div>
            
            <div className="space-y-3">
              <button
                onClick={() => router.push('/products')}
                className="w-full bg-primary text-white py-3 rounded-lg hover:bg-blue-600 transition font-semibold"
              >
                Continue Shopping
              </button>
              <button
                onClick={() => router.push('/')}
                className="w-full bg-white text-primary border-2 border-primary py-3 rounded-lg hover:bg-gray-50 transition font-semibold"
              >
                Back to Home
              </button>
            </div>
          </div>
        ) : (
          <div className="text-center">
            <div className="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-6">
              <svg className="w-12 h-12 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </div>
            
            <h1 className="text-3xl font-bold text-gray-900 mb-4">
              Payment Failed
            </h1>
            
            <p className="text-gray-600 mb-8">
              Unfortunately, your payment could not be processed. Please try again or contact support if the problem persists.
            </p>
            
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
              <p className="text-sm text-red-800">
                {paymentStatus?.error || 'Payment verification failed'}
              </p>
            </div>
            
            <div className="space-y-3">
              <button
                onClick={() => router.push('/checkout')}
                className="w-full bg-primary text-white py-3 rounded-lg hover:bg-blue-600 transition font-semibold"
              >
                Try Again
              </button>
              <button
                onClick={() => router.push('/products')}
                className="w-full bg-white text-gray-700 border-2 border-gray-300 py-3 rounded-lg hover:bg-gray-50 transition font-semibold"
              >
                Continue Shopping
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
```

### src/app/globals.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 249, 250, 251;
  --background-end-rgb: 255, 255, 255;
}

body {
  color: rgb(var(--foreground-rgb));
  background: rgb(var(--background-end-rgb));
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}
```

## Database Seed Script

### scripts/seedProducts.js
```javascript
// Run this script to seed initial products
// node scripts/seedProducts.js

const mongoose = require('mongoose');
require('dotenv').config({ path: '.env.local' });

const productSchema = new mongoose.Schema({
  name: String,
  description: String,
  price: Number,
  image: String,
  category: String,
  stock: Number,
  sku: String,
  isActive: Boolean,
}, { timestamps: true });

const Product = mongoose.models.Product || mongoose.model('Product', productSchema);

const sampleProducts = [
  {
    name: 'Premium Wireless Headphones',
    description: 'High-quality wireless headphones with noise cancellation and 30-hour battery life.',
    price: 199.99,
    image: '/images/headphones.jpg',
    category: 'Electronics',
    stock: 50,
    sku: 'ELEC-001',
    isActive: true,
  },
  {
    name: 'Smart Fitness Watch',
    description: 'Track your fitness goals with this advanced smartwatch featuring heart rate monitoring.',
    price: 299.99,
    image: '/images/watch.jpg',
    category: 'Electronics',
    stock: 30,
    sku: 'ELEC-002',
    isActive: true,
  },
  {
    name: 'Portable Bluetooth Speaker',
    description: 'Waterproof portable speaker with 360-degree sound and 12-hour battery.',
    price: 79.99,
    image: '/images/speaker.jpg',
    category: 'Electronics',
    stock: 75,
    sku: 'ELEC-003',
    isActive: true,
  },
  {
    name: 'Leather Laptop Bag',
    description: 'Premium leather laptop bag with multiple compartments and padded protection.',
    price: 149.99,
    image: '/images/bag.jpg',
    category: 'Accessories',
    stock: 40,
    sku: 'ACC-001',
    isActive: true,
  },
  {
    name: 'Wireless Charging Pad',
    description: 'Fast wireless charging pad compatible with all Qi-enabled devices.',
    price: 39.99,
    image: '/images/charger.jpg',
    category: 'Accessories',
    stock: 100,
    sku: 'ACC-002',
    isActive: true,
  },
];

async function seedDatabase() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('Connected to MongoDB');

    // Clear existing products
    await Product.deleteMany({});
    console.log('Cleared existing products');

    // Insert sample products
    const inserted = await Product.insertMany(sampleProducts);
    console.log(`Inserted ${inserted.length} products`);

    console.log('Database seeded successfully!');
    process.exit(0);
  } catch (error) {
    console.error('Error seeding database:', error);
    process.exit(1);
  }
}

seedDatabase();
```

## Package.json
```json
{
  "name": "store-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "seed": "node scripts/seedProducts.js"
  },
  "dependencies": {
    "react": "^18",
    "react-dom": "^18",
    "next": "14.2.5",
    "axios": "^1.6.0",
    "mongoose": "^8.0.0",
    "nodemailer": "^6.9.0"
  },
  "devDependencies": {
    "tailwindcss": "^3.4.1",
    "postcss": "^8",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.2.5"
  }
}
```

## PHP Integration

### In your PHP website, add this to your product page button:

```php
<!-- Direct link to store -->
<a href="http://localhost:3000/products" 
   class="btn-buy-now" 
   target="_blank">
  Buy Now
</a>

<!-- Or link to specific product -->
<a href="http://localhost:3000/products/<?php echo $mongo_product_id; ?>" 
   class="btn-buy-now" 
   target="_blank">
  Buy <?php echo $product_name; ?>
</a>
```

## Setup Instructions

1. **Install Dependencies:**
```bash
npm install
```

2. **Setup MongoDB:**
```bash
# Install MongoDB locally or use MongoDB Atlas
# Update MONGODB_URI in .env.local
```

3. **Configure Environment:**
```bash
# Copy and edit .env.local with your credentials
```

4. **Seed Database:**
```bash
npm run seed
```

5. **Run Development Server:**
```bash
npm run dev
```

6. **Access Application:**
```
http://localhost:3000
```

## Production Deployment

1. Deploy to Vercel/Netlify
2. Setup MongoDB Atlas
3. Configure environment variables
4. Update PHP links to production URL

Your store is now ready with MVC architecture!# Next.js Store Application - MVC Architecture

## Project Structure
```
store-app/
├── src/
│   ├── app/
│   │   ├── layout.js
│   │   ├── page.js
│   │   ├── products/
│   │   │   ├── page.js
│   │   │   └── [id]/
│   │   │       └── page.js
│   │   ├── checkout/
│   │   │   └── page.js
│   │   ├── success/
│   │   │   └── page.js
│   │   └── api/
│   │       ├── products/
│   │       │   └── route.js
│   │       ├── orders/
│   │       │   └── route.js
│   │       └── payment/
│   │           ├── create/
│   │           │   └── route.js
│   │           └── verify/
│   │               └── route.js
│   ├── components/
│   │   ├── ProductCard.js
│   │   ├── ProductDetails.js
│   │   ├── CartSidebar.js
│   │   └── CheckoutForm.js
│   ├── controllers/
│   │   ├── ProductController.js
│   │   ├── OrderController.js
│   │   └── PaymentController.js
│   ├── models/
│   │   ├── Product.js
│   │   ├── Order.js
│   │   └── Payment.js
│   ├── services/
│   │   ├── ZohoService.js
│   │   └── EmailService.js
│   ├── context/
│   │   └── CartContext.js
│   ├── config/
│   │   ├── database.js
│   │   └── zoho.config.js
│   └── middleware/
│       └── errorHandler.js
├── public/
│   └── images/
├── .env.local
├── next.config.js
├── tailwind.config.js
├── package.json
└── README.md
```

## Installation

```bash
npx create-next-app@latest store-app
cd store-app
npm install axios mongoose
```

## Environment Variables (.env.local)

```env
# App Configuration
NEXT_PUBLIC_API_URL=http://localhost:3000
NEXT_PUBLIC_STORE_URL=http://localhost:3000

# Database
MONGODB_URI=mongodb://localhost:27017/store_db

# Zoho Payment Gateway
ZOHO_CLIENT_ID=your_zoho_client_id
ZOHO_CLIENT_SECRET=your_zoho_client_secret
ZOHO_REDIRECT_URI=http://localhost:3000/api/payment/verify
ZOHO_MERCHANT_KEY=your_merchant_key
ZOHO_API_ENDPOINT=https://accounts.zoho.com/oauth/v2/token
ZOHO_PAYMENT_ENDPOINT=https://payments.zoho.com/api/v1/payments

# Email Configuration (Optional)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your_email@gmail.com
SMTP_PASSWORD=your_app_password
```

## Configuration Files

### tailwind.config.js
```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        primary: '#3b82f6',
        secondary: '#8b5cf6',
      },
    },
  },
  plugins: [],
}
```

### next.config.js
```javascript
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    domains: ['your-php-domain.com', 'localhost'],
  },
}

module.exports = nextConfig
```

### src/config/database.js
```javascript
import mongoose from 'mongoose';

const MONGODB_URI = process.env.MONGODB_URI;

if (!MONGODB_URI) {
  throw new Error('Please define the MONGODB_URI environment variable');
}

let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

async function connectDB() {
  if (cached.conn) {
    return cached.conn;
  }

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
    };

    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
      return mongoose;
    });
  }

  try {
    cached.conn = await cached.promise;
  } catch (e) {
    cached.promise = null;
    throw e;
  }

  return cached.conn;
}

export default connectDB;
```

### src/config/zoho.config.js
```javascript
export const zohoConfig = {
  clientId: process.env.ZOHO_CLIENT_ID,
  clientSecret: process.env.ZOHO_CLIENT_SECRET,
  redirectUri: process.env.ZOHO_REDIRECT_URI,
  merchantKey: process.env.ZOHO_MERCHANT_KEY,
  apiEndpoint: process.env.ZOHO_API_ENDPOINT,
  paymentEndpoint: process.env.ZOHO_PAYMENT_ENDPOINT,
};

export const emailConfig = {
  host: process.env.SMTP_HOST,
  port: process.env.SMTP_PORT,
  user: process.env.SMTP_USER,
  password: process.env.SMTP_PASSWORD,
};
```

## Models

### src/models/Product.js
```javascript
import mongoose from 'mongoose';

const ProductSchema = new mongoose.Schema({
  name: {
    type: String,
    required: [true, 'Product name is required'],
    trim: true,
  },
  description: {
    type: String,
    required: [true, 'Product description is required'],
  },
  price: {
    type: Number,
    required: [true, 'Product price is required'],
    min: 0,
  },
  image: {
    type: String,
    default: '/images/default-product.jpg',
  },
  category: {
    type: String,
    required: true,
    trim: true,
  },
  stock: {
    type: Number,
    required: true,
    min: 0,
    default: 0,
  },
  sku: {
    type: String,
    unique: true,
    required: true,
  },
  isActive: {
    type: Boolean,
    default: true,
  },
}, {
  timestamps: true,
});

ProductSchema.index({ name: 'text', description: 'text' });

export default mongoose.models.Product || mongoose.model('Product', ProductSchema);
```

### src/models/Order.js
```javascript
import mongoose from 'mongoose';

const OrderItemSchema = new mongoose.Schema({
  productId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Product',
    required: true,
  },
  name: String,
  price: Number,
  quantity: {
    type: Number,
    required: true,
    min: 1,
  },
});

const OrderSchema = new mongoose.Schema({
  orderId: {
    type: String,
    required: true,
    unique: true,
  },
  items: [OrderItemSchema],
  customer: {
    name: {
      type: String,
      required: true,
    },
    email: {
      type: String,
      required: true,
    },
    phone: {
      type: String,
      required: true,
    },
    address: {
      type: String,
      required: true,
    },
  },
  totalAmount: {
    type: Number,
    required: true,
    min: 0,
  },
  status: {
    type: String,
    enum: ['pending', 'paid', 'processing', 'shipped', 'delivered', 'cancelled', 'failed'],
    default: 'pending',
  },
  paymentId: String,
  paymentStatus: {
    type: String,
    enum: ['pending', 'completed', 'failed', 'refunded'],
    default: 'pending',
  },
  paymentMethod: String,
  notes: String,
}, {
  timestamps: true,
});

OrderSchema.index({ orderId: 1 });
OrderSchema.index({ 'customer.email': 1 });
OrderSchema.index({ status: 1 });

export default mongoose.models.Order || mongoose.model('Order', OrderSchema);
```

### src/models/Payment.js
```javascript
import mongoose from 'mongoose';

const PaymentSchema = new mongoose.Schema({
  orderId: {
    type: String,
    required: true,
    ref: 'Order',
  },
  paymentId: {
    type: String,
    required: true,
    unique: true,
  },
  amount: {
    type: Number,
    required: true,
    min: 0,
  },
  currency: {
    type: String,
    default: 'USD',
  },
  status: {
    type: String,
    enum: ['initiated', 'success', 'failed', 'pending', 'refunded'],
    default: 'initiated',
  },
  paymentMethod: String,
  transactionId: String,
  gatewayResponse: {
    type: mongoose.Schema.Types.Mixed,
  },
  customerEmail: String,
  metadata: {
    type: mongoose.Schema.Types.Mixed,
  },
}, {
  timestamps: true,
});

PaymentSchema.index({ orderId: 1 });
PaymentSchema.index({ paymentId: 1 });
PaymentSchema.index({ status: 1 });

export default mongoose.models.Payment || mongoose.model('Payment', PaymentSchema);
```

## Services

### src/services/ZohoService.js
```javascript
import axios from 'axios';
import { zohoConfig } from '@/config/zoho.config';

class ZohoService {
  constructor() {
    this.config = zohoConfig;
    this.accessToken = null;
    this.tokenExpiry = null;
  }

  async getAccessToken() {
    try {
      // Check if token is still valid
      if (this.accessToken && this.tokenExpiry && Date.now() < this.tokenExpiry) {
        return this.accessToken;
      }

      const response = await axios.post(this.config.apiEndpoint, {
        client_id: this.config.clientId,
        client_secret: this.config.clientSecret,
        grant_type: 'client_credentials',
      });

      this.accessToken = response.data.access_token;
      this.tokenExpiry = Date.now() + (response.data.expires_in * 1000) - 60000; // Refresh 1 min before expiry

      return this.accessToken;
    } catch (error) {
      console.error('Error getting Zoho access token:', error.response?.data || error.message);
      throw new Error('Failed to authenticate with payment gateway');
    }
  }

  async createPayment(paymentData) {
    try {
      const accessToken = await this.getAccessToken();

      const payload = {
        amount: paymentData.amount,
        currency: paymentData.currency || 'USD',
        customer: {
          name: paymentData.customerName,
          email: paymentData.customerEmail,
          phone: paymentData.customerPhone,
        },
        order_id: paymentData.orderId,
        redirect_url: paymentData.redirectUrl,
        cancel_url: paymentData.cancelUrl || paymentData.redirectUrl,
        description: paymentData.description,
        metadata: paymentData.metadata || {},
      };

      const response = await axios.post(
        this.config.paymentEndpoint,
        payload,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
        }
      );

      return {
        success: true,
        paymentId: response.data.payment_id,
        paymentUrl: response.data.payment_url,
        data: response.data,
      };
    } catch (error) {
      console.error('Error creating Zoho payment:', error.response?.data || error.message);
      throw new Error('Failed to create payment');
    }
  }

  async verifyPayment(paymentId) {
    try {
      const accessToken = await this.getAccessToken();

      const response = await axios.get(
        `${this.config.paymentEndpoint}/${paymentId}`,
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
          },
        }
      );

      return {
        success: true,
        status: response.data.status,
        data: response.data,
      };
    } catch (error) {
      console.error('Error verifying Zoho payment:', error.response?.data || error.message);
      throw new Error('Failed to verify payment');
    }
  }

  async refundPayment(paymentId, amount, reason) {
    try {
      const accessToken = await this.getAccessToken();

      const response = await axios.post(
        `${this.config.paymentEndpoint}/${paymentId}/refund`,
        {
          amount,
          reason,
        },
        {
          headers: {
            Authorization: `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
        }
      );

      return {
        success: true,
        refundId: response.data.refund_id,
        data: response.data,
      };
    } catch (error) {
      console.error('Error refunding Zoho payment:', error.response?.data || error.message);
      throw new Error('Failed to process refund');
    }
  }
}

export default new ZohoService();
```

### src/services/EmailService.js
```javascript
import nodemailer from 'nodemailer';
import { emailConfig } from '@/config/zoho.config';

class EmailService {
  constructor() {
    this.transporter = null;
  }

  async getTransporter() {
    if (this.transporter) {
      return this.transporter;
    }

    this.transporter = nodemailer.createTransport({
      host: emailConfig.host,
      port: emailConfig.port,
      secure: false,
      auth: {
        user: emailConfig.user,
        pass: emailConfig.password,
      },
    });

    return this.transporter;
  }

  async sendOrderConfirmation(order) {
    try {
      const transporter = await this.getTransporter();

      const mailOptions = {
        from: emailConfig.user,
        to: order.customer.email,
        subject: `Order Confirmation - ${order.orderId}`,
        html: this.getOrderConfirmationTemplate(order),
      };

      await transporter.sendMail(mailOptions);
      return { success: true };
    } catch (error) {
      console.error('Error sending order confirmation:', error);
      return { success: false, error: error.message };
    }
  }

  getOrderConfirmationTemplate(order) {
    const itemsHtml = order.items.map(item => `
      <tr>
        <td>${item.name}</td>
        <td>${item.quantity}</td>
        <td>$${item.price.toFixed(2)}</td>
        <td>$${(item.price * item.quantity).toFixed(2)}</td>
      </tr>
    `).join('');

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #3b82f6; color: white; padding: 20px; text-align: center; }
          .content { padding: 20px; background: #f9fafb; }
          table { width: 100%; border-collapse: collapse; margin: 20px 0; }
          th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
          th { background: #f3f4f6; }
          .total { font-size: 18px; font-weight: bold; text-align: right; padding: 10px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>Order Confirmation</h1>
          </div>
          <div class="content">
            <h2>Thank you for your order!</h2>
            <p>Order ID: <strong>${order.orderId}</strong></p>
            <p>Date: ${new Date(order.createdAt).toLocaleDateString()}</p>
            
            <h3>Order Details:</h3>
            <table>
              <thead>
                <tr>
                  <th>Product</th>
                  <th>Quantity</th>
                  <th>Price</th>
                  <th>Total</th>
                </tr>
              </thead>
              <tbody>
                ${itemsHtml}
              </tbody>
            </table>
            
            <div class="total">
              Total: $${order.totalAmount.toFixed(2)}
            </div>
            
            <h3>Shipping Address:</h3>
            <p>
              ${order.customer.name}<br>
              ${order.customer.address}<br>
              Phone: ${order.customer.phone}<br>
              Email: ${order.customer.email}
            </p>
          </div>
        </div>
      </body>
      </html>
    `;
  }
}

export default new EmailService();
```

## Controllers

### src/controllers/ProductController.js
```javascript
import Product from '@/models/Product';
import connectDB from '@/config/database';

class ProductController {
  async getAllProducts(filters = {}) {
    try {
      await connectDB();

      const query = { isActive: true };

      if (filters.category) {
        query.category = filters.category;
      }

      if (filters.search) {
        query.$text = { $search: filters.search };
      }

      const products = await Product.find(query)
        .sort({ createdAt: -1 })
        .lean();

      return {
        success: true,
        data: products,
        count: products.length,
      };
    } catch (error) {
      console.error('Error fetching products:', error);
      throw new Error('Failed to fetch products');
    }
  }

  async getProductById(productId) {
    try {
      await connectDB();

      const product = await Product.findById(productId).lean();

      if (!product) {
        return {
          success: false,
          error: 'Product not found',
        };
      }

      return {
        success: true,
        data: product,
      };
    } catch (error) {
      console.error('Error fetching product:', error);
      throw new Error('Failed to fetch product');
    }
  }

  async createProduct(productData) {
    try {
      await connectDB();

      const product = await Product.create(productData);

      return {
        success: true,
        data: product,
      };
    } catch (error) {
      console.error('Error creating product:', error);
      throw new Error('Failed to create product');
    }
  }

  async updateProduct(productId, updateData) {
    try {
      await connectDB();

      const product = await Product.findByIdAndUpdate(
        productId,
        updateData,
        { new: true, runValidators: true }
      );

      if (!product) {
        return {
          success: false,
          error: 'Product not found',
        };
      }

      return {
        success: true,
        data: product,
      };
    } catch (error) {
      console.error('Error updating product:', error);
      throw new Error('Failed to update product');
    }
  }

  async deleteProduct(productId) {
    try {
      await connectDB();

      const product = await Product.findByIdAndUpdate(
        productId,
        { isActive: false },
        { new: true }
      );

      if (!product) {
        return {
          success: false,
          error: 'Product not found',
        };
      }

      return {
        success: true,
        message: 'Product deleted successfully',
      };
    } catch (error) {
      console.error('Error deleting product:', error);
      throw new Error('Failed to delete product');
    }
  }

  async updateStock(productId, quantity) {
    try {
      await connectDB();

      const product = await Product.findByIdAndUpdate(
        productId,
        { $inc: { stock: quantity } },
        { new: true }
      );

      if (!product) {
        return {
          success: false,
          error: 'Product not found',
        };
      }

      return {
        success: true,
        data: product,
      };
    } catch (error) {
      console.error('Error updating stock:', error);
      throw new Error('Failed to update stock');
    }
  }
}

export default new ProductController();
```

### src/controllers/OrderController.js
```javascript
import Order from '@/models/Order';
import Product from '@/models/Product';
import connectDB from '@/config/database';
import EmailService from '@/services/EmailService';

class OrderController {
  generateOrderId() {
    return `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;
  }

  async createOrder(orderData) {
    try {
      await connectDB();

      // Validate stock availability
      for (const item of orderData.items) {
        const product = await Product.findById(item.productId);
        if (!product) {
          throw new Error(`Product ${item.productId} not found`);
        }
        if (product.stock < item.quantity) {
          throw new Error(`Insufficient stock for ${product.name}`);
        }
      }

      const orderId = this.generateOrderId();

      const order = await Order.create({
        ...orderData,
        orderId,
      });

      // Reduce stock
      for (const item of orderData.items) {
        await Product.findByIdAndUpdate(
          item.productId,
          { $inc: { stock: -item.quantity } }
        );
      }

      return {
        success: true,
        data: order,
        orderId: order.orderId,
      };
    } catch (error) {
      console.error('Error creating order:', error);
      throw new Error(error.message || 'Failed to create order');
    }
  }

  async getOrderById(orderId) {
    try {
      await connectDB();

      const order = await Order.findOne({ orderId })
        .populate('items.productId')
        .lean();

      if (!order) {
        return {
          success: false,
          error: 'Order not found',
        };
      }

      return {
        success: true,
        data: order,
      };
    } catch (error) {
      console.error('Error fetching order:', error);
      throw new Error('Failed to fetch order');
    }
  }

  async getAllOrders(filters = {}) {
    try {
      await connectDB();

      const query = {};

      if (filters.status) {
        query.status = filters.status;
      }

      if (filters.email) {
        query['customer.email'] = filters.email;
      }

      const orders = await Order.find(query)
        .sort({ createdAt: -1 })
        .populate('items.productId')
        .lean();

      return {
        success: true,
        data: orders,
        count: orders.length,
      };
    } catch (error) {
      console.error('Error fetching orders:', error);
      throw new Error('Failed to fetch orders');
    }
  }

  async updateOrderStatus(orderId, status, paymentId = null) {
    try {
      await connectDB();

      const updateData = { status };
      if (paymentId) {
        updateData.paymentId = paymentId;
        updateData.paymentStatus = 'completed';
      }

      const order = await Order.findOneAndUpdate(
        { orderId },
        updateData,
        { new: true }
      ).populate('items.productId');

      if (!order) {
        return {
          success: false,
          error: 'Order not found',
        };
      }

      // Send confirmation email if order is paid
      if (status === 'paid') {
        await EmailService.sendOrderConfirmation(order);
      }

      return {
        success: true,
        data: order,
      };
    } catch (error) {
      console.error('Error updating order status:', error);
      throw new Error('Failed to update order status');
    }
  }

  async cancelOrder(orderId) {
    try {
      await connectDB();

      const order = await Order.findOne({ orderId });

      if (!order) {
        return {
          success: false,
          error: 'Order not found',
        };
      }

      if (order.status === 'shipped' || order.status === 'delivered') {
        return {
          success: false,
          error: 'Cannot cancel order that has been shipped or delivered',
        };
      }

      // Restore stock
      for (const item of order.items) {
        await Product.findByIdAndUpdate(
          item.productId,
          { $inc: { stock: item.quantity } }
        );
      }

      order.status = 'cancelled';
      await order.save();

      return {
        success: true,
        data: order,
      };
    } catch (error) {
      console.error('Error cancelling order:', error);
      throw new Error('Failed to cancel order');
    }
  }
}

export default new OrderController();
```

### src/controllers/PaymentController.js
```javascript
import Payment from '@/models/Payment';
import connectDB from '@/config/database';
import ZohoService from '@/services/ZohoService';
import OrderController from './OrderController';

class PaymentController {
  async initiatePayment(paymentData) {
    try {
      await connectDB();

      const { orderId, amount, customer } = paymentData;

      // Create payment record
      const paymentRecord = await Payment.create({
        orderId,
        paymentId: `PAY-${Date.now()}`,
        amount,
        currency: 'USD',
        status: 'initiated',
        customerEmail: customer.email,
        metadata: paymentData.metadata || {},
      });

      // Create payment with Zoho
      const zohoPayment = await ZohoService.createPayment({
        orderId,
        amount,
        customerName: customer.name,
        customerEmail: customer.email,
        customerPhone: customer.phone,
        redirectUrl: `${process.env.NEXT_PUBLIC_STORE_URL}/success`,
        cancelUrl: `${process.env.NEXT_PUBLIC_STORE_URL}/checkout`,
        description: `Payment for order ${orderId}`,
        metadata: {
          paymentRecordId: paymentRecord._id.toString(),
        },
      });

      // Update payment record with Zoho payment ID
      paymentRecord.transactionId = zohoPayment.paymentId;
      paymentRecord.gatewayResponse = zohoPayment.data;
      await paymentRecord.save();

      return {
        success: true,
        paymentId: zohoPayment.paymentId,
        paymentUrl: zohoPayment.paymentUrl,
        data: paymentRecord,
      };
    } catch (error) {
      console.error('Error initiating payment:', error);
      throw new Error('Failed to initiate payment');
    }
  }

  async verifyPayment(paymentId) {
    try {
      await connectDB();

      // Verify with Zoho
      const zohoVerification = await ZohoService.verifyPayment(paymentId);

      // Find payment record
      const payment = await Payment.findOne({ transactionId: paymentId });

      if (!payment) {
        return {
          success: false,
          error: 'Payment record not found',
        };
      }

      // Update payment status
      payment.status = zohoVerification.data.status === 'success' ? 'success' : 'failed';
      payment.gatewayResponse = zohoVerification.data;
      await payment.save();

      // Update order status if payment successful
      if (payment.status === 'success') {
        await OrderController.updateOrderStatus(
          payment.orderId,
          'paid',
          payment.paymentId
        );
      }

      return {
        success: true,
        status: payment.status,
        data: payment,
      };
    } catch (error) {
      console.error('Error verifying payment:', error);
      throw new Error('Failed to verify payment');
    }
  }

  async getPaymentByOrderId(orderId) {
    try {
      await connectDB();

      const payment = await Payment.findOne({ orderId }).lean();

      if (!payment) {
        return {
          success: false,
          error: 'Payment not found',
        };
      }

      return {
        success: true,
        data: payment,
      };
    } catch (error) {
      console.error('Error fetching payment:', error);
      throw new Error('Failed to fetch payment');
    }
  }

  async refundPayment(paymentId, amount, reason) {
    try {
      await connectDB();

      const payment = await Payment.findOne({ transactionId: paymentId });

      if (!payment) {
        return {
          success: false,
          error: 'Payment not found',
        };
      }

      if (payment.status !== 'success') {
        return {
          success: false,
          error: 'Only successful payments can be refunded',
        };
      }

      // Process refund with Zoho
      const refund = await ZohoService.refundPayment(paymentId, amount, reason);

      // Update payment record
      payment.status = 'refunded';
      payment.gatewayResponse = {
        ...payment.gatewayResponse,
        refund: refund.data,
      };
      await payment.save();

      return {
        success: true,
        data: payment,
        refundId: refund.refundId,
      };
    } catch (error) {
      console.error('Error processing refund:', error);
      throw new Error('Failed to process refund');
    }
  }
}

export default new PaymentController();
```

## Middleware

### src/middleware/errorHandler.js
```javascript
export class ApiError extends Error {
  constructor(message, statusCode = 500) {
    super(message);
    this.statusCode = statusCode;
    this.name = 'ApiError';
  }
}

export function errorHandler(error) {
  console.error('API Error:', error);

  if (error instanceof ApiError) {
    return {
      success: false,
      error: error.message,
      statusCode: error.statusCode,
    };
  }

  if (error.name === 'ValidationError') {
    return {
      success: false,
      error: 'Validation failed',
      details: error.errors,
      statusCode: 400,
    };
  }

  if (error.name === 'CastError') {
    return {
      success: false,
      error: 'Invalid ID format',
      statusCode: 400,
    };
  }

  return {
    success: false,
    error: 'Internal server error',
    statusCode: 500,
  };
}

export function asyncHandler(handler) {
  return async (req, res) => {
    try {
      return await handler(req, res);
    } catch (error) {
      const errorResponse = errorHandler(error);
      return Response.json(errorResponse, { status: errorResponse.statusCode });
    }
  };
}